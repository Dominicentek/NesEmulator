#include "Ppu.h"
#include <cstdint>
#include "Cartrige.h"

Ppu::Ppu()
{
    colorPallet = { 
        0x59595F, 0x00008F, 0x18018E, 0x3F0176 ,0x550055, 0x550110, 0x550000, 0x442200, 0x323200, 0x103301, 0x013310, 0x004545, 0x014467, 0x000000, 0x000000, 0x000000,
        0xAAAAAA, 0x0145DD, 0x5510EF, 0x7600EF ,0x9801BB, 0xAB0155, 0x983301, 0x894401, 0x676700, 0x326700, 0x016700, 0x016654, 0x015488, 0x080808, 0x000000, 0x000000,
        0xEFEEEF, 0x4588FE, 0x7776FE, 0x9944FF ,0xBB44EE, 0xCD5598, 0xDD6644, 0xCC8901, 0xBAAA01, 0x77BA01, 0x22BB22, 0x23BB76, 0x22BBCC, 0x454544, 0x000000, 0x000000,
        0xEFEEEF, 0x99CCFF, 0xAAABFE, 0xBA98FF ,0xDD98FE, 0xEF99DC, 0xEFABAA, 0xEEBA98, 0xEFDD89, 0xBBDC89, 0x99DC98, 0x99DDBB, 0x98DDEF, 0xAAAAAA, 0x000000, 0x000000,
    };
}

void Ppu::CpuWrite(uint16_t address, uint8_t data)
{
}

uint8_t Ppu::CpuRead(uint16_t address, bool readOnly)
{
    uint8_t data = 0x00;
    return data;
}

void Ppu::PpuWrite(uint16_t address, uint8_t data)
{
}

uint8_t Ppu::PpuRead(uint16_t address, bool readOnly)
{
    return 0;
}

void Ppu::connectCartrige(const Cartrige* cartrige)
{
    this->cartrige = cartrige;
}
